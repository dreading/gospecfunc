// Copyright 2019 Infin IT Pty Ltd. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package erf_test

import (
	. "github.com/dreading/gospecfunc/erf"
	"math/cmplx"
	"testing"
)

func TestErf(t *testing.T) {
	testCases := []struct {
		x, y complex128
	}{
		// extended precision values computed using Mathematica
		{0.5 + 0.5i, 0.64261291485482052831942135847199581467891706129770675079 + 0.45788139443519221584208890063522927648352418879876980026i},
	}

	for _, tc := range testCases {
		y := Erf(tc.x)
		if veryclose(real(y), real(tc.y)) == false {
			t.Fatalf("real(Feaddeyeva(%v)): expected %v, got %v", tc.x, real(tc.y), real(y))
		}
		if veryclose(imag(y), imag(tc.y)) == false {
			t.Fatalf("imag(Feaddeyeva(%v)): expected %v, got %v", tc.x, imag(tc.y), imag(y))
		}
	}
}

func TestErfi(t *testing.T) {
	testCases := []struct {
		x, y complex128
	}{
		// extended precision values computed using Mathematica
		{0.5 + 0.5i, 0.45788139443519221584208890063522927648352418879876980026 + 0.64261291485482052831942135847199581467891706129770675079i},
	}

	for _, tc := range testCases {
		y := Erfi(tc.x)
		if veryclose(real(y), real(tc.y)) == false {
			t.Fatalf("real(Feaddeyeva(%v)): expected %v, got %v", tc.x, real(tc.y), real(y))
		}
		if veryclose(imag(y), imag(tc.y)) == false {
			t.Fatalf("imag(Feaddeyeva(%v)): expected %v, got %v", tc.x, imag(tc.y), imag(y))
		}
	}
}

func TestErfc(t *testing.T) {
	testCases := []struct {
		x, y complex128
	}{
		// extended precision values computed using Mathematica
		{0.5 + 0.5i, 0.35738708514517947168057864152800418532108293870229324920 - 0.45788139443519221584208890063522927648352418879876980026i},
	}

	for _, tc := range testCases {
		y := Erfc(tc.x)
		if veryclose(real(y), real(tc.y)) == false {
			t.Fatalf("real(Feaddeyeva(%v)): expected %v, got %v", tc.x, real(tc.y), real(y))
		}
		if veryclose(imag(y), imag(tc.y)) == false {
			t.Fatalf("imag(Feaddeyeva(%v)): expected %v, got %v", tc.x, imag(tc.y), imag(y))
		}
	}
}

func TestDawson(t *testing.T) {
	testCases := []struct {
		x, y complex128
	}{
		// extended precision values computed using Mathematica
		{0.5 + 0.5i, 0.62914469771362783370956774548491213744194694694642085904 + 0.30523946561753882091323070230974006125244937735067903082i},
	}

	for _, tc := range testCases {
		y := Dawson(tc.x)
		if veryclose(real(y), real(tc.y)) == false {
			t.Fatalf("real(Feaddeyeva(%v)): expected %v, got %v", tc.x, real(tc.y), real(y))
		}
		if veryclose(imag(y), imag(tc.y)) == false {
			t.Fatalf("imag(Feaddeyeva(%v)): expected %v, got %v", tc.x, imag(tc.y), imag(y))
		}
	}
}

func TestFaddeyeva(t *testing.T) {
	testCases := []struct {
		x, y complex128
	}{
		// extended precision values computed using Mathematica
		{0.5 + 0.5i, 0.53315670791217491376822891204271112100489475433534083731 + 0.23048823138445840870767807113455955862989744369028872730i},
		{0.5 - 0.5i, 1.22200841586857051846433425316494818297839563988414726868 + 1.18933930859286440925425394156570233479350417957149007767i},
		{1i, 0.427583576155807004410750344490515180820159503164252663745},
		{1e-6 + 1i, 0.4275835761556526328493784736234753039736837822758930 + 2.732120147838193381057169040518915230701819394688055e-7i},
		{1e-6 + 1e-306i, 0.999999999999000000000000499999999999833333333333375 + 1.128379167094760321118095528973392291136734854788178e-6i},
		{1 + 6i, 0.09042061181059991923301180554904798212673320930942912678 + 0.01468696493570315247307122002137683778368795616914642077i},
		{27 + 6i, 0.00443317174008201258067677571678621874859470968731072565 + 0.0199231504706938420329936786311769904920146805188960127i},
		{30 + 0.5i, 0.00031387498369284792188556932814368703085190653772250994 + 0.018811544867725669657743020797708353349304909157722630i},
		{300 + 0.5i, 3.134430109403810707285936929670826265756403763144267e-6 + 0.001880637169151322864644900927390870562669247939154905i},
	}

	for _, tc := range testCases {
		y := Faddeyeva(tc.x)
		if close(real(y), real(tc.y)) == false {
			t.Fatalf("real(Feaddeyeva(%v)): expected %v, got %v", tc.x, real(tc.y), real(y))
		}
		if close(imag(y), imag(tc.y)) == false {
			t.Fatalf("imag(Feaddeyeva(%v)): expected %v, got %v", tc.x, imag(tc.y), imag(y))
		}
	}
}

func TestFaddeyevaInf(t *testing.T) {
	testCases := []struct {
		z complex128
	}{
		{1 - 1e151i},
	}

	for _, tc := range testCases {
		if y := Faddeyeva(tc.z); cmplx.IsInf(y) == false {
			t.Fatalf("Faddeyeva(%v): expected +Inf, got %v", tc.z, y)
		}
	}
}

func TestFrenselC(t *testing.T) {
	testCases := []struct {
		x, y complex128
	}{
		// extended precision values computed using Mathematica
		{0.5 + 0.5i, 0.53173595500717020917826034727737322043857351236142204171 + 0.53173595500717020917826034727737322043857351236142204171i},
	}

	for _, tc := range testCases {
		y, _ := Fresnel(tc.x)
		if veryclose(real(y), real(tc.y)) == false {
			t.Fatalf("real(FresnelC(%v)): expected %v, got %v", tc.x, real(tc.y), real(y))
		}
		if veryclose(imag(y), imag(tc.y)) == false {
			t.Fatalf("imag(FresnelC(%v)): expected %v, got %v", tc.x, imag(tc.y), imag(y))
		}
	}
}

func TestFrenselS(t *testing.T) {
	testCases := []struct {
		x, y complex128
	}{
		// extended precision values computed using Mathematica
		{0.5 + 0.5i, -0.1367816577291388468638554200956170098637129887108742800 + 0.1367816577291388468638554200956170098637129887108742800i},
	}

	for _, tc := range testCases {
		_, y := Fresnel(tc.x)
		if veryclose(real(y), real(tc.y)) == false {
			t.Fatalf("real(FresnelS(%v)): expected %v, got %v", tc.x, real(tc.y), real(y))
		}
		if veryclose(imag(y), imag(tc.y)) == false {
			t.Fatalf("imag(FresnelS(%v)): expected %v, got %v", tc.x, imag(tc.y), imag(y))
		}
	}
}

func TestVoigt(t *testing.T) {
	testCases := []struct {
		x, t, vr, vi float64
	}{
		{0.5, 0.5, 0.6181707462326899, 0.16454229282575275},
		{1, 1e-34, 0.5, 0.5},
		{0, 0, 1, 0},
	}

	for _, tc := range testCases {
		vr, vi := Voigt(tc.x, tc.t)
		if veryclose(vr, tc.vr) == false {
			t.Fatalf("Voigt Real(%v, %v)): expected %v, got %v", tc.x, tc.t, tc.vr, vr)
		}
		if veryclose(vi, tc.vi) == false {
			t.Fatalf("Voigt Imag(%v, %v)): expected %v, got %v", tc.x, tc.t, tc.vi, vi)
		}
	}
}

func TestErfcxLargeNegative(t *testing.T) {

	testCases := []struct {
		x, y float64
	}{
		// extended precision valeus computed using Mathematica
		{-24.6438055098077, 1.1363627998302537408199038021823478437489991303892970e264},
		{-18.3606202026281, 5.0941755016494381919909749370853183247108146946632678e+146},
		{-9.72124040525614, 2.2026768805395279137105540037081856761793654217012477e+41},
		{-6.57964775166634, 1.2659147073374019834469401791473064878069367955720208e+19},
		{-5.7942495882689, 7.6162503596169089643842718139903640837346133123846494e14},
		{-3.43805509807655, 271948.8992883505292945176350662819469190070229287071247260},
	}

	for _, tc := range testCases {
		if y := Erfcx(complex(tc.x, 0)); soclose(real(y), tc.y, 1e-13) == false {
			t.Fatalf("Erfcx(%v): expected %v, got %v", tc.x, tc.y, y)
		}
	}
}

func TestErfcx(t *testing.T) {

	testCases := []struct {
		x, y float64
	}{
		// extended precision valeus computed using Mathematica
		{-2.1, 164.2938078850581786033535756010373886889407300324149511047},
		{-2, 108.9409043899779724123554338248132140422788747719728953862},
		{-1.86725877128166, 65.08259822571413624464960190629088108079118255820727492512},
		{-1.08186060788421, 6.040496719420559069042337844922667141609211183706177952338},
		{-0.296462444486757, 1.446697524293911950679978694884888005694830774823915998041},
		{0.005, 0.994383010444487460664921267795131696009662336552286964214},
		{0.015, 0.983296798726328419630055816606331961796171111447408937982},
		{0.025, 0.972403959287139186426127332901843462926377357232826256334},
		{0.035, 0.961700211123345616213285826693877012605160259119750099719},
		{0.045, 0.951181384586605391591835117105747901633341779062219256350},
		{0.085, 0.910875618969303755489268014572727420145212631471071643310},
		{0.125, 0.873221845082150809604259458265011503813894815852801554551},
		{0.165, 0.838000122820756396572584191270257449962035174462760034700},
		{0.205, 0.805011808647812948684326323926900112146420639161524947823},
		{0.245, 0.774077240731805275283772904649144041614981920902410892245},
		{0.285, 0.745033699907773281303954688873874452889022475120509721819},
		{0.325, 0.717733611001030623957630520686035030066320163470296047683},
		{0.365, 0.692042953917701004026208527684801148586271632072604088411},
		{0.405, 0.667839858063444839371881191919638398757498179076104220218},
		{0.445, 0.645013357211350799948124265507752559801796631172462067133},
		{0.485, 0.623462284992061119210497058456011795787511117781134673006},
		{0.525, 0.603094293799894744625208425611517834627744585662443254101},
		{0.565, 0.583824982162195568106920611242702293141488767160236834609},
		{0.605, 0.565577117559542164501067362934351810395477974498380970290},
		{0.645, 0.548279943357619699099139450704797927439362758549504257635},
		{0.685, 0.531868559956261556443032170353645759486983846379243327071},
		{0.725, 0.516283371510306180885293717601831233510482399490283566389},
		{0.765, 0.501469590658408651953828467227355290753694000745650143327},
		{0.805, 0.487376794633539950172017697324389234750380060276401159426},
		{0.845, 0.473958526942814926086749083639513997699759077657136434491},
		{0.885, 0.461171939511747230113697353046867706885677873778661000402},
		{0.925, 0.448977470803748870561173186939248274722246681308923976136},
		{0.965, 0.437338555962250543477759163202616039373033880426725052787},
		{1.005, 0.426221365490981417116716816958253471957082736827275527724},
		{1.045, 0.415594569396939700360582079728006926926751739495061863458},
		{1.085, 0.405429124078325303598775681056513302357882874930922192573},
		{1.125, 0.395698079552995901404447380917780675735568739926218154598},
		{1.165, 0.386376404897700113238797645251538924152000732524863589557},
		{1.205, 0.377440830009477417155762196940826864159455411950679396516},
		{1.245, 0.368869702012541394956379711544655120190179133922907366874},
		{1.285, 0.360642854820435039542769792600759089519443366764637850222},
		{1.325, 0.352741490527509602551218053761972762396755503216399876495},
		{1.365, 0.345148071448640938757515390714981111507059149629896867243},
		{1.405, 0.337846221753993813147864178909043848053691661151995380729},
		{1.445, 0.330820637758687133365793522477550432144303762651117022321},
		{1.485, 0.324057006027235966985382604927746976054272688964751856626},
		{1.525, 0.317541928541244662352260688737805373771527927716895667974},
		{1.565, 0.311262854257388098199444999594444296124715609167003131171},
		{1.605, 0.305208016452455326308672541537325706951994591952815987793},
		{1.645, 0.299366375314197615033933638984294891278957262926199660657},
		{1.685, 0.293727565291843491955789235695841073397892488845984387029},
		{1.725, 0.288281846769223317321255940980506733417321662418697227413},
		{1.765, 0.283020061667191152001651195333039875198027650323487244153},
		{1.805, 0.277933592621060818811103051384558245629165677151944994292},
		{1.845, 0.273014325413628724093911221185666781129931715528328102286},
		{1.885, 0.268254614375514687776879189073185542708380386224717186510},
		{1.925, 0.263647250492432548689317673004237892347953976519997252787},
		{1.965, 0.259185431983973186260590920128703161488686731711478763620},
		{2.005, 0.254862737140868410378197114481618782658160442602321528205},
		{2.2, 0.235592963678614044014359623958601484860449783046503065784},
		{2.3, 0.226741562167559182278409075731174219986016856969128152285},
		{2.4, 0.218498734537033324798331778119700177405895424396153425032},
		{2.5, 0.210806364061143580647112048406702319338307957160457014474},
		{2.6, 0.203613247356709217675024670487324451494564068737639254581},
		{2.7, 0.196874127331955777294457596620541696516388776979545978952},
		{2.8, 0.190548879689991890171447938348564245668699051030575046575},
		{2.9, 0.184601825955590819559095606386417419732663223877724189197},
		{3.1, 0.173718408605408249238198122326095875800791322035293393556},
		{3.25, 0.166335348426821876763382867168390335463838085613685679039},
		{3.4, 0.159535364658930451617496909342846665922686886311289742886},
		{3.5, 0.155293655608894297402726497581878931772029346556179446995},
		{3.6, 0.151265299832373900201058765548651277161503415570914507944},
		{3.7, 0.147434997537185079106896173807972864332447961848373776123},
		{4, 0.136999457625061389889445171399805482330249235548065362711},
		{4.005, 0.136837726520500868253295120345051735196068701920136694003},
		{4.2, 0.130808492311142055505599885717351294830483996653876650634},
		{4.4, 0.125141655538144909597295973534491628925035591491393240532},
		{4.6, 0.119936259788385584778679005803079392286516843916009027535},
		{4.8, 0.115139075660803077657456491465303605446888880350253980592},
		{5, 0.110704637733068626370212086491753050588946861820851988118},
		{5.2, 0.106593897415364324276903441387302382359222330627682942958},
		{5.4, 0.102773143558704592079954147264051919416416966824746401326},
		{5.6, 0.099213131392251968093427605247134388349552478512020841635},
		{5.8, 0.095888374824814137074364195487338486754392008319061700730},
		{6.1, 0.091294300368683829823074240477242185914302816671197523194},
		{6.3, 0.088465899352852195346653327876483088124514646886681094558},
		{6.6, 0.084534047936099143620039747346014258841686182451899725171},
		{6.9, 0.080933623309744137246261856537609439309024368204598029825},
		{7.2, 0.077624760305437907728147138539219830818809599319336320953},
		{7.5, 0.074573693062876683005129246106875317486746019012154833012},
		{7.8, 0.071751639451180743059173963268520475222211900229295094569},
		{8.5, 0.065925122499980351740810493087025596140372256050903987962},
		{8.9, 0.062999284509605058820154191223666020689837795810575956295},
		{9.3, 0.060320751482104229833131838112135526618023943686960509063},
		{9.7, 0.057859589450813717908726509450771592294743115949242440500},
		{10.1, 0.055590487009239874072668756977316448499997063427901670056},
		{10.4, 0.054001617205674664577726695556061937417485076891872377490},
		{10.9, 0.051545377222636732301269368249997079165071572821372577585},
		{11.4, 0.049302064889766276112945735319506744555183187368842814774},
		{12, 0.046854221014893762619588413399396659043239319157188033159},
		{12.4, 0.045352625260711563898029318421069233339192162155180676999},
		{12.9, 0.043605384458319179698337897658692325079768648968713197102},
		{13.4, 0.041987424980118667761499470018432927039734623458613971805},
		{14.2, 0.039633863503029805714061411893598199348337850822081621601},
		{15.2, 0.037037924207469733992741695507368600711118464494258876852},
		{16.2, 0.034760541785341453582285001907716500572486908335666918303},
		{17.2, 0.032746560437795179696617958353765600553135327057402975538},
		{18.5, 0.030452374799774609709493844688857702242971013318556873212},
		{19.8, 0.028458220359710470213242717035232205155861641996165197899},
		{21.1, 0.026708913961244820182487859277122299548952542637940670527},
		{23, 0.024506862089282605906492773516943358894477652853301765776},
		{25, 0.022549572432641358943604583959391877260069067016409611312},
		{28, 0.020136801964214276776510103362724975347151047326912243449},
		{31, 0.018190209599233477438632582737167304527490270180508871694},
		{35, 0.016113130956815978703719487638757726460680511418909454842},
		{39, 0.014461648704936689701580633958449377245219718676907856247},
		{45, 0.012534452900894467051449055854100440838404214987613266340},
		{49, 0.011511676863882963051342517240246971839283153791905621872},
		/*		{59,     },
				{69,     },
				{79,     },
				{99,     },
				{150,     },
				{200,     },
		*/
		{49, 0.011511676863882963051342517240246971839283153791905621872},
		{400, 0.001410469551179591084138343529142883250331558081642951025},
		{0.488935718910689, 0.621407170543139014621201513672065153966191496240882991744},
		{1.27433388230814, 0.362803991242338377291710601242918924966030832510719387918},
		{2.05973204570559, 0.249162426872206342991325437388674726308559083733372555711},
		{2.84513020910303, 0.187820125319619076448476381651127670262889920476862189097},
		{99.4491043069892, 0.005672862203514460617907910565771973977540996637069157954},
	}

	for _, tc := range testCases {
		if y := Erfcx(complex(tc.x, 0)); soclose(real(y), tc.y, 1e-15) == false {
			t.Fatalf("Erfcx(%v): expected %v, got %v", tc.x, tc.y, y)
		}
	}
}

func TestErfcxInf(t *testing.T) {
	testCases := []struct {
		val float64
	}{
		{-27},
	}

	for _, tc := range testCases {
		if y := Erfcx(complex(tc.val, 0)); cmplx.IsInf(y) == false {
			t.Fatalf("Erfcx(%v): expected +Inf, got %v", tc.val, y)
		}
	}
}

// The floating point comparison tests are copied from from math/all_test.go.
func tolerance(a, b, e float64) bool {
	// Multiplying by e here can underflow denormal values to zero.
	// Check a==b so that at least if a and b are small and identical
	// we say they match.
	if a == b {
		return true
	}
	d := a - b
	if d < 0 {
		d = -d
	}
	// note: b is correct (expected) value, a is actual value.
	// make error tolerance a fraction of b, not a.
	if b != 0 {
		e = e * b
		if e < 0 {
			e = -e
		}
	}
	return d < e
}

func close(a, b float64) bool      { return tolerance(a, b, 1e-14) }
func veryclose(a, b float64) bool  { return tolerance(a, b, 5e-16) }
func soclose(a, b, e float64) bool { return tolerance(a, b, e) }
