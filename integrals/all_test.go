// Copyright 2019 Infin IT Pty Ltd. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package misc_test

import (
	. "github.com/dreading/gospecfunc/integrals"
	"testing"
)

func TestAbramowitz(t *testing.T) {
	testCases := []struct {
		order         int
		num, den, res float64
	}{
		{0, 1.0e0, 512.0e0, 0.87377726306985360531e0},
		{0, 1.0e0, 128.0e0, 0.84721859650456925922e0},
		{0, 1.0e0, 32.0e0, 0.77288934483988301615e0},
		{0, 1.0e0, 8.0e0, 0.59684345853450151603e0},
		{0, 1.0e0, 2.0e0, 0.29871735283675888392e0},
		{0, 1.0e0, 1.0e0, 0.15004596450516388138e0},
		{0, 5.0e0, 4.0e0, 0.11114662419157955096e0},
		{0, 3.0e0, 2.0e0, 0.83909567153151897766e-1},
		{0, 15.0e0, 8.0e0, 0.56552321717943417515e-1},
		{0, 2.0e0, 1.0e0, 0.49876496603033790206e-1},
		{0, 17.0e0, 8.0e0, 0.44100889219762791328e-1},
		{0, 3.0e0, 1.0e0, 0.19738535180254062496e-1},
		{0, 4.0e0, 1.0e0, 0.86193088287161479900e-2},
		{0, 5.0e0, 1.0e0, 0.40224788162540127227e-2},
		{0, 6.0e0, 1.0e0, 0.19718658458164884826e-2},
		{0, 7.0e0, 1.0e0, 0.10045868340133538505e-2},
		{0, 10.0e0, 1.0e0, 0.15726917263304498649e-3},
		{0, 15.0e0, 1.0e0, 0.10352666912350263437e-4},
		{0, 20.0e0, 1.0e0, 0.91229759190956745069e-6},
		{0, 40.0e0, 1.0e0, 0.25628287737952698742e-9},
		{1, 1.0e0, 512.0e0, 0.49828219848799921792e0},
		{1, 1.0e0, 128.0e0, 0.49324391773047288556e0},
		{1, 1.0e0, 32.0e0, 0.47431612784691234649e0},
		{1, 1.0e0, 8.0e0, 0.41095983258760410149e0},
		{1, 1.0e0, 2.0e0, 0.25317617388227035867e0},
		{1, 1.0e0, 1.0e0, 0.14656338138597777543e0},
		{1, 5.0e0, 4.0e0, 0.11421547056018366587e0},
		{1, 3.0e0, 2.0e0, 0.90026307383483764795e-1},
		{1, 15.0e0, 8.0e0, 0.64088214170742303375e-1},
		{1, 2.0e0, 1.0e0, 0.57446614314166191085e-1},
		{1, 17.0e0, 8.0e0, 0.51581624564800730959e-1},
		{1, 3.0e0, 1.0e0, 0.25263719555776416016e-1},
		{1, 4.0e0, 1.0e0, 0.11930803330196594536e-1},
		{1, 5.0e0, 1.0e0, 0.59270542280915272465e-2},
		{1, 6.0e0, 1.0e0, 0.30609215358017829567e-2},
		{1, 7.0e0, 1.0e0, 0.16307382136979552833e-2},
		{1, 10.0e0, 1.0e0, 0.28371851916959455295e-3},
		{1, 15.0e0, 1.0e0, 0.21122150121323238154e-4},
		{1, 20.0e0, 1.0e0, 0.20344578892601627337e-5},
		{1, 40.0e0, 1.0e0, 0.71116517236209642290e-9},
		{2, 1.0e0, 512.0e0, 0.44213858162107913430e0},
		{2, 1.0e0, 128.0e0, 0.43923379545684026308e0},
		{2, 1.0e0, 32.0e0, 0.42789857297092602234e0},
		{2, 1.0e0, 8.0e0, 0.38652825661854504406e0},
		{2, 1.0e0, 2.0e0, 0.26538204413231368110e0},
		{2, 1.0e0, 1.0e0, 0.16848734838334595000e0},
		{2, 5.0e0, 4.0e0, 0.13609200032513227112e0},
		{2, 3.0e0, 2.0e0, 0.11070330027727917352e0},
		{2, 15.0e0, 8.0e0, 0.82126019995530382267e-1},
		{2, 2.0e0, 1.0e0, 0.74538781999594581763e-1},
		{2, 17.0e0, 8.0e0, 0.67732034377612811390e-1},
		{2, 3.0e0, 1.0e0, 0.35641808698811851022e-1},
		{2, 4.0e0, 1.0e0, 0.17956589956618269083e-1},
		{2, 5.0e0, 1.0e0, 0.94058737143575370625e-2},
		{2, 6.0e0, 1.0e0, 0.50809356204299213556e-2},
		{2, 7.0e0, 1.0e0, 0.28149565414209719359e-2},
		{2, 10.0e0, 1.0e0, 0.53808696422559303431e-3},
		{2, 15.0e0, 1.0e0, 0.44821756380146327259e-4},
		{2, 20.0e0, 1.0e0, 0.46890678427324100410e-5},
		{2, 40.0e0, 1.0e0, 0.20161544850996420504e-8},
	}

	for _, tc := range testCases {
		ζ := Abramowitz(tc.order, tc.num/tc.den)
		if close(ζ, tc.res) == false {
			t.Fatalf("Abramowitz(%v, %v): expected %v, got %v", tc.order, tc.num/tc.den, tc.res, ζ)
		}

	}
}

func TestClausen(t *testing.T) {
	testCases := []struct {
		num, den, res float64
	}{
		{1.0e0, 512.0e0, 0.14137352886760576684e-1},
		{1.0e0, 32.0e0, 0.13955467081981281934e0},
		{-1.0e0, 8.0e0, -0.38495732156574238507e0},
		{1.0e0, 2.0e0, 0.84831187770367927099e0},
		{1.0e0, 1.0e0, 0.10139591323607685043e1},
		{-3.0e0, 2.0e0, -0.93921859275409211003e0},
		{2.0e0, 1.0e0, 0.72714605086327924743e0},
		{5.0e0, 2.0e0, 0.43359820323553277936e0},
		{-3.0e0, 1.0e0, -0.98026209391301421161e-1},
		{4.0e0, 1.0e0, -0.56814394442986978080e0},
		{17.0e0, 4.0e0, -0.70969701784448921625e0},
		{-5.0e0, 1.0e0, 0.99282013254695671871e0},
		{11.0e0, 2.0e0, -0.98127747477447367875e0},
		{6.0e0, 1.0e0, -0.64078266570172320959e0},
		{8.0e0, 1.0e0, 0.86027963733231192456e0},
		{-10.0e0, 1.0e0, 0.39071647608680211043e0},
		{15.0e0, 1.0e0, 0.47574793926539191502e0},
		{20.0e0, 1.0e0, 0.10105014481412878253e1},
		{-30.0e0, 1.0e0, 0.96332089044363075154e0},
		{50.0e0, 1.0e0, -0.61782699481929311757e0},
	}

	for _, tc := range testCases {
		ζ := Clausen(tc.num / tc.den)
		if close(ζ, tc.res) == false {
			t.Fatalf("Clausen(%v): expected %v, got %v", tc.num/tc.den, tc.res, ζ)
		}

	}
}

func TestDebye(t *testing.T) {
	testCases := []struct {
		order         int
		num, den, res float64
	}{
		{1, 1.0e0, 512.0e0, 0.99951182471380889183e0},
		{1, 1.0e0, 32.0e0, 0.99221462647120597836e0},
		{1, 1.0e0, 8.0e0, 0.96918395997895308324e0},
		{1, 1.0e0, 2.0e0, 0.88192715679060552968e0},
		{1, 1.0e0, 1.0e0, 0.77750463411224827642e0},
		{1, 3.0e0, 2.0e0, 0.68614531078940204342e0},
		{1, 2.0e0, 1.0e0, 0.60694728460981007205e0},
		{1, 5.0e0, 2.0e0, 0.53878956907785587703e0},
		{1, 3.0e0, 1.0e0, 0.48043521957304283829e0},
		{1, 4.0e0, 1.0e0, 0.38814802129793784501e0},
		{1, 17.0e0, 4.0e0, 0.36930802829242526815e0},
		{1, 5.0e0, 1.0e0, 0.32087619770014612104e0},
		{1, 11.0e0, 2.0e0, 0.29423996623154246701e0},
		{1, 6.0e0, 1.0e0, 0.27126046678502189985e0},
		{1, 8.0e0, 1.0e0, 0.20523930310221503723e0},
		{1, 10.0e0, 1.0e0, 0.16444346567994602563e0},
		{1, 15.0e0, 1.0e0, 0.10966194482735821276e0},
		{1, 20.0e0, 1.0e0, 0.82246701178200016086e-1},
		{1, 30.0e0, 1.0e0, 0.54831135561510852445e-1},
		{1, 50.0e0, 1.0e0, 0.32898681336964528729e-1},
		{2, 1.0e0, 512.0e0, 0.9993491172790459973830},
		{2, 1.0e0, 32.0e0, 0.98962402299599181205e0},
		{2, 1.0e0, 8.0e0, 0.95898426200345986743e0},
		{2, 1.0e0, 2.0e0, 0.84372119334725358934e0},
		{2, 1.0e0, 1.0e0, 0.70787847562782928288e0},
		{2, 3.0e0, 2.0e0, 0.59149637225671282917e0},
		{2, 2.0e0, 1.0e0, 0.49308264399053185014e0},
		{2, 5.0e0, 2.0e0, 0.41079413579749669069e0},
		{2, 3.0e0, 1.0e0, 0.34261396060786351671e0},
		{2, 4.0e0, 1.0e0, 0.24055368752127897660e0},
		{2, 17.0e0, 4.0e0, 0.22082770061202308232e0},
		{2, 5.0e0, 1.0e0, 0.17232915939014138975e0},
		{2, 11.0e0, 2.0e0, 0.14724346738730182894e0},
		{2, 6.0e0, 1.0e0, 0.12666919046715789982e0},
		{2, 8.0e0, 1.0e0, 0.74268805954862854626e-1},
		{2, 10.0e0, 1.0e0, 0.47971498020121871622e-1},
		{2, 15.0e0, 1.0e0, 0.21369201683658373846e-1},
		{2, 20.0e0, 1.0e0, 0.12020564476446432799e-1},
		{2, 30.0e0, 1.0e0, 0.53424751249537071952e-2},
		{2, 50.0e0, 1.0e0, 0.19232910450553508562e-2},
		{3, 1.0e0, 512.0e0, 0.99926776885985461940e0},
		{3, 1.0e0, 32.0e0, 0.98833007755734698212e0},
		{3, 1.0e0, 8.0e0, 0.95390610472023510237e0},
		{3, 1.0e0, 2.0e0, 0.82496296897623372315e0},
		{3, 1.0e0, 1.0e0, 0.67441556407781468010e0},
		{3, 3.0e0, 2.0e0, 0.54710665141286285468e0},
		{3, 2.0e0, 1.0e0, 0.44112847372762418113e0},
		{3, 5.0e0, 2.0e0, 0.35413603481042394211e0},
		{3, 3.0e0, 1.0e0, 0.28357982814342246206e0},
		{3, 4.0e0, 1.0e0, 0.18173691382177474795e0},
		{3, 17.0e0, 4.0e0, 0.16277924385112436877e0},
		{3, 5.0e0, 1.0e0, 0.11759741179993396450e0},
		{3, 11.0e0, 2.0e0, 0.95240802723158889887e-1},
		{3, 6.0e0, 1.0e0, 0.77581324733763020269e-1},
		{3, 8.0e0, 1.0e0, 0.36560295673194845002e-1},
		{3, 10.0e0, 1.0e0, 0.19295765690345489563e-1},
		{3, 15.0e0, 1.0e0, 0.57712632276188798621e-2},
		{3, 20.0e0, 1.0e0, 0.24352200674805479827e-2},
		{3, 30.0e0, 1.0e0, 0.72154882216335666096e-3},
		{3, 50.0e0, 1.0e0, 0.15585454565440389896e-3},
		{4, 1.0e0, 512.0e0, 0.99921896192761576256e0},
		{4, 1.0e0, 32.0e0, 0.98755425280996071022e0},
		{4, 1.0e0, 8.0e0, 0.95086788606389739976e0},
		{4, 1.0e0, 2.0e0, 0.81384569172034042516e0},
		{4, 1.0e0, 1.0e0, 0.65487406888673697092e0},
		{4, 3.0e0, 2.0e0, 0.52162830964878715188e0},
		{4, 2.0e0, 1.0e0, 0.41189273671788528876e0},
		{4, 5.0e0, 2.0e0, 0.32295434858707304628e0},
		{4, 3.0e0, 1.0e0, 0.25187863642883314410e0},
		{4, 4.0e0, 1.0e0, 0.15185461258672022043e0},
		{4, 17.0e0, 4.0e0, 0.13372661145921413299e0},
		{4, 5.0e0, 1.0e0, 0.91471377664481164749e-1},
		{4, 11.0e0, 2.0e0, 0.71227828197462523663e-1},
		{4, 6.0e0, 1.0e0, 0.55676547822738862783e-1},
		{4, 8.0e0, 1.0e0, 0.21967566525574960096e-1},
		{4, 10.0e0, 1.0e0, 0.96736755602711590082e-2},
		{4, 15.0e0, 1.0e0, 0.19646978158351837850e-2},
		{4, 20.0e0, 1.0e0, 0.62214648623965450200e-3},
		{4, 30.0e0, 1.0e0, 0.12289514092077854510e-3},
		{4, 50.0e0, 1.0e0, 0.15927210319002161231e-4},
	}

	for _, tc := range testCases {
		ζ := Debye(tc.order, tc.num/tc.den)
		if close(ζ, tc.res) == false {
			t.Fatalf("Debye(%v, %v): expected %v, got %v", tc.order, tc.num/tc.den, tc.res, ζ)
		}

	}
}

func TestGoodst(t *testing.T) {
	testCases := []struct {
		num, den, res float64
	}{
		{1.0e0, 512.0e0, 0.59531540040441651584e1},
		{1.0e0, 128.0e0, 0.45769601268624494109e1},
		{1.0e0, 32.0e0, 0.32288921331902217638e1},
		{1.0e0, 8.0e0, 0.19746110873568719362e1},
		{1.0e0, 2.0e0, 0.96356046208697728563e0},
		{1.0e0, 1.0e0, 0.60513365250334458174e0},
		{5.0e0, 4.0e0, 0.51305506459532198016e0},
		{3.0e0, 2.0e0, 0.44598602820946133091e0},
		{15.0e0, 8.0e0, 0.37344458206879749357e0},
		{2.0e0, 1.0e0, 0.35433592884953063055e0},
		{17.0e0, 8.0e0, 0.33712156518881920994e0},
		{5.0e0, 2.0e0, 0.29436170729362979176e0},
		{3.0e0, 1.0e0, 0.25193499644897222840e0},
		{7.0e0, 2.0e0, 0.22028778222123939276e0},
		{4.0e0, 1.0e0, 0.19575258237698917033e0},
		{9.0e0, 2.0e0, 0.17616303166670699424e0},
		{5.0e0, 1.0e0, 0.16015469479664778673e0},
		{23.0e0, 4.0e0, 0.14096116876193391066e0},
		{6.0e0, 1.0e0, 0.13554987191049066274e0},
		{7.0e0, 1.0e0, 0.11751605060085098084e0},
	}

	for _, tc := range testCases {
		ζ := Goodst(tc.num / tc.den)
		if close(ζ, tc.res) == false {
			t.Fatalf("Goodst(%v): expected %v, got %v", tc.num/tc.den, tc.res, ζ)
		}

	}
}

func TestLobach(t *testing.T) {
	testCases := []struct {
		num, den, res float64
	}{
		{1.0e0, 512.0e0, 0.12417639065161393857e-8},
		{1.0e0, 128.0e0, 0.79473344770001088225e-7},
		{1.0e0, 32.0e0, 0.50867598186208834198e-5},
		{1.0e0, 8.0e0, 0.32603097901207200319e-3},
		{1.0e0, 2.0e0, 0.21380536815408214419e-1},
		{1.0e0, 1.0e0, 0.18753816902083824050e0},
		{3.0e0, 2.0e0, 0.83051199971883645115e0},
		{2.0e0, 1.0e0, 0.18854362426679034904e1},
		{5.0e0, 2.0e0, 0.21315988986516411053e1},
		{3.0e0, 1.0e0, 0.21771120185613427221e1},
		{4.0e0, 1.0e0, 0.22921027921896650849e1},
		{5.0e0, 1.0e0, 0.39137195028784495586e1},
		{6.0e0, 1.0e0, 0.43513563983836427904e1},
		{7.0e0, 1.0e0, 0.44200644968478185898e1},
		{10.0e0, 1.0e0, 0.65656013133623829156e1},
		{15.0e0, 1.0e0, 0.10825504661504599479e2},
		{20.0e0, 1.0e0, 0.13365512855474227325e2},
		{30.0e0, 1.0e0, 0.21131002685639959927e2},
		{50.0e0, 1.0e0, 0.34838236589449117389e2},
		{100.0e0, 1.0e0, 0.69657062437837394278e2},
	}

	for _, tc := range testCases {
		ζ := Lobach(tc.num / tc.den)
		if close(ζ, tc.res) == false {
			t.Fatalf("Lobach(%v): expected %v, got %v", tc.num/tc.den, tc.res, ζ)
		}

	}
}

func TestStrom(t *testing.T) {
	testCases := []struct {
		num, den, res float64
	}{
		{1.0e0, 512.0e0, 0.21901065985698662316e-15},
		{1.0e0, 128.0e0, 0.22481399438625244761e-12},
		{1.0e0, 32.0e0, 0.23245019579558857124e-9},
		{1.0e0, 8.0e0, 0.24719561475975007037e-6},
		{1.0e0, 2.0e0, 0.28992610989833245669e-3},
		{1.0e0, 1.0e0, 0.10698146390809715091e-1},
		{3.0e0, 2.0e0, 0.89707650964424730705e-1},
		{2.0e0, 1.0e0, 0.40049605719592888440e0},
		{3.0e0, 1.0e0, 0.30504104398079096598e1},
		{4.0e0, 1.0e0, 0.11367704858439426431e2},
		{33.0e0, 8.0e0, 0.12960679405324786954e2},
		{9.0e0, 2.0e0, 0.18548713944748505675e2},
		{5.0e0, 1.0e0, 0.27866273821903121400e2},
		{6.0e0, 1.0e0, 0.51963334071699323351e2},
		{8.0e0, 1.0e0, 0.10861016747891228129e3},
		{10.0e0, 1.0e0, 0.15378903316556621624e3},
		{15.0e0, 1.0e0, 0.19302665532558721516e3},
		{20.0e0, 1.0e0, 0.19636850166006541482e3},
		{30.0e0, 1.0e0, 0.19651946766008214217e3},
		{50.0e0, 1.0e0, 0.19651956920868316152e3},
	}

	for _, tc := range testCases {
		ζ := Strom(tc.num / tc.den)
		if soclose(ζ, tc.res, 5e-14) == false {
			t.Fatalf("Strom(%v): expected %v, got %v", tc.num/tc.den, tc.res, ζ)
		}

	}
}

func TestSynch(t *testing.T) {
	testCases := []struct {
		order         int
		num, den, res float64
	}{
		{1, 1.0e0, 512.0e0, 0.26514864547487397044e0},
		{1, 1.0e0, 32.0e0, 0.62050129979079045645e0},
		{1, 1.0e0, 8.0e0, 0.85112572132368011206e0},
		{1, 1.0e0, 2.0e0, 0.87081914687546885094e0},
		{1, 1.0e0, 1.0e0, 0.65142281535536396975e0},
		{1, 3.0e0, 2.0e0, 0.45064040920322354579e0},
		{1, 2.0e0, 1.0e0, 0.30163590285073940285e0},
		{1, 5.0e0, 2.0e0, 0.19814490804441305867e0},
		{1, 3.0e0, 1.0e0, 0.12856571000906381300e0},
		{1, 4.0e0, 1.0e0, 0.52827396697866818297e-1},
		{1, 17.0e0, 4.0e0, 0.42139298471720305542e-1},
		{1, 5.0e0, 1.0e0, 0.21248129774981984268e-1},
		{1, 11.0e0, 2.0e0, 0.13400258907505536491e-1},
		{1, 6.0e0, 1.0e0, 0.84260797314108699935e-2},
		{1, 8.0e0, 1.0e0, 0.12884516186754671469e-2},
		{1, 10.0e0, 1.0e0, 0.19223826430086897418e-3},
		{1, 12.0e0, 1.0e0, 0.28221070834007689394e-4},
		{1, 15.0e0, 1.0e0, 0.15548757973038189372e-5},
		{1, 20.0e0, 1.0e0, 0.11968634456097453636e-7},
		{1, 25.0e0, 1.0e0, 0.89564246772237127742e-10},
		{2, 1.0e0, 512.0e0, 0.13430727275667378338e0},
		{2, 1.0e0, 32.0e0, 0.33485265272424176976e0},
		{2, 1.0e0, 8.0e0, 0.50404224110911078651e0},
		{2, 1.0e0, 2.0e0, 0.60296523236016785113e0},
		{2, 1.0e0, 1.0e0, 0.49447506210420826699e0},
		{2, 3.0e0, 2.0e0, 0.36036067860473360389e0},
		{2, 2.0e0, 1.0e0, 0.24967785497625662113e0},
		{2, 5.0e0, 2.0e0, 0.16813830542905833533e0},
		{2, 3.0e0, 1.0e0, 0.11117122348556549832e0},
		{2, 4.0e0, 1.0e0, 0.46923205826101330711e-1},
		{2, 17.0e0, 4.0e0, 0.37624545861980001482e-1},
		{2, 5.0e0, 1.0e0, 0.19222123172484106436e-1},
		{2, 11.0e0, 2.0e0, 0.12209535343654701398e-1},
		{2, 6.0e0, 1.0e0, 0.77249644268525771866e-2},
		{2, 8.0e0, 1.0e0, 0.12029044213679269639e-2},
		{2, 10.0e0, 1.0e0, 0.18161187569530204281e-3},
		{2, 12.0e0, 1.0e0, 0.26884338006629353506e-4},
		{2, 15.0e0, 1.0e0, 0.14942212731345828759e-5},
		{2, 20.0e0, 1.0e0, 0.11607696854385161390e-7},
		{2, 25.0e0, 1.0e0, 0.87362343746221526073e-10},
	}

	for _, tc := range testCases {
		ζ := Synch(tc.order, tc.num/tc.den)
		if soclose(ζ, tc.res, 5e-12) == false {
			t.Fatalf("Synch(%v, %v): expected %v, got %v", tc.order, tc.num/tc.den, tc.res, ζ)
		}

	}
}

func TestTransport(t *testing.T) {
	testCases := []struct {
		order         int
		num, den, res float64
	}{
		{2, 1.0e0, 512.0e0, 0.19531247930394515480e-2},
		{2, 1.0e0, 32.0e0, 0.31249152314331109004e-1},
		{2, 1.0e0, 8.0e0, 0.12494577194783451032e0},
		{2, 1.0e0, 2.0e0, 0.49655363615640595865e0},
		{2, 1.0e0, 1.0e0, 0.97303256135517012845e0},
		{2, 3.0e0, 2.0e0, 0.14121978695932525805e1},
		{2, 2.0e0, 1.0e0, 0.18017185674405776809e1},
		{2, 5.0e0, 2.0e0, 0.21350385339277043015e1},
		{2, 3.0e0, 1.0e0, 0.24110500490169534620e1},
		{2, 4.0e0, 1.0e0, 0.28066664045631179931e1},
		{2, 17.0e0, 4.0e0, 0.28777421863296234131e1},
		{2, 5.0e0, 1.0e0, 0.30391706043438554330e1},
		{2, 11.0e0, 2.0e0, 0.31125074928667355940e1},
		{2, 6.0e0, 1.0e0, 0.31656687817738577185e1},
		{2, 8.0e0, 1.0e0, 0.32623520367816009184e1},
		{2, 10.0e0, 1.0e0, 0.32843291144979517358e1},
		{2, 15.0e0, 1.0e0, 0.32897895167775788137e1},
		{2, 20.0e0, 1.0e0, 0.32898672226665499687e1},
		{2, 30.0e0, 1.0e0, 0.32898681336064325400e1},
		{2, 50.0e0, 1.0e0, 0.32898681336964528724e1},
		{3, 1.0e0, 512.0e0, 0.19073483296476379584e-5},
		{3, 1.0e0, 32.0e0, 0.48826138243180786081e-3},
		{3, 1.0e0, 8.0e0, 0.78074163848431205820e-2},
		{3, 1.0e0, 2.0e0, 0.12370868718812031049e0},
		{3, 1.0e0, 1.0e0, 0.47984100657241749994e0},
		{3, 3.0e0, 2.0e0, 0.10269431622039754738e1},
		{3, 2.0e0, 1.0e0, 0.17063547219458658863e1},
		{3, 5.0e0, 2.0e0, 0.24539217444475937661e1},
		{3, 3.0e0, 1.0e0, 0.32106046629422467723e1},
		{3, 4.0e0, 1.0e0, 0.45792174372291563703e1},
		{3, 17.0e0, 4.0e0, 0.48722022832940370805e1},
		{3, 5.0e0, 1.0e0, 0.56143866138422732286e1},
		{3, 11.0e0, 2.0e0, 0.59984455864575470009e1},
		{3, 6.0e0, 1.0e0, 0.63033953673480961120e1},
		{3, 8.0e0, 1.0e0, 0.69579908688361166266e1},
		{3, 10.0e0, 1.0e0, 0.71503227120085929750e1},
		{3, 15.0e0, 1.0e0, 0.72110731475871876393e1},
		{3, 20.0e0, 1.0e0, 0.72123221966388461839e1},
		{3, 30.0e0, 1.0e0, 0.72123414161609465119e1},
		{3, 50.0e0, 1.0e0, 0.72123414189575656868e1},
		{4, 1.0e0, 512.0e0, 0.24835263919461834041e-8},
		{4, 1.0e0, 32.0e0, 0.10172029353616724881e-4},
		{4, 1.0e0, 8.0e0, 0.65053332405940765479e-3},
		{4, 1.0e0, 2.0e0, 0.41150448004155727767e-1},
		{4, 1.0e0, 1.0e0, 0.31724404523442648241e0},
		{4, 3.0e0, 2.0e0, 0.10079442901142373591e1},
		{4, 2.0e0, 1.0e0, 0.22010881024333408363e1},
		{4, 5.0e0, 2.0e0, 0.38846508619156545210e1},
		{4, 3.0e0, 1.0e0, 0.59648223973714765245e1},
		{4, 4.0e0, 1.0e0, 0.10731932392998622219e2},
		{4, 17.0e0, 4.0e0, 0.11940028876819364777e2},
		{4, 5.0e0, 1.0e0, 0.15359784316882182982e2},
		{4, 11.0e0, 2.0e0, 0.17372587633093742893e2},
		{4, 6.0e0, 1.0e0, 0.19122976016053166969e2},
		{4, 8.0e0, 1.0e0, 0.23583979156921941515e2},
		{4, 10.0e0, 1.0e0, 0.25273667677030441733e2},
		{4, 15.0e0, 1.0e0, 0.25955198214572256372e2},
		{4, 20.0e0, 1.0e0, 0.25975350935212241910e2},
		{4, 30.0e0, 1.0e0, 0.25975757522084093747e2},
		{4, 50.0e0, 1.0e0, 0.25975757609067315288e2},
		{5, 1.0e0, 512.0e0, 0.36379780361036116971e-11},
		{5, 1.0e0, 32.0e0, 0.23840564453948442379e-6},
		{5, 1.0e0, 8.0e0, 0.60982205372226969189e-4},
		{5, 1.0e0, 2.0e0, 0.15410004586376649337e-1},
		{5, 1.0e0, 1.0e0, 0.23661587923909478926e0},
		{5, 3.0e0, 2.0e0, 0.11198756851307629651e1},
		{5, 2.0e0, 1.0e0, 0.32292901663684049171e1},
		{5, 5.0e0, 2.0e0, 0.70362973105160654056e1},
		{5, 3.0e0, 1.0e0, 0.12770557691044159511e2},
		{5, 4.0e0, 1.0e0, 0.29488339015245845447e2},
		{5, 17.0e0, 4.0e0, 0.34471340540362254586e2},
		{5, 5.0e0, 1.0e0, 0.50263092218175187785e2},
		{5, 11.0e0, 2.0e0, 0.60819909101127165207e2},
		{5, 6.0e0, 1.0e0, 0.70873334429213460498e2},
		{5, 8.0e0, 1.0e0, 0.10147781242977788097e3},
		{5, 10.0e0, 1.0e0, 0.11638074540242071077e3},
		{5, 15.0e0, 1.0e0, 0.12409623901262967878e3},
		{5, 20.0e0, 1.0e0, 0.12442270155632550228e3},
		{5, 30.0e0, 1.0e0, 0.12443132790838589548e3},
		{5, 50.0e0, 1.0e0, 0.12443133061720432435e3},
		{6, 1.0e0, 512.0e0, 0.56843405953641209574e-14},
		{6, 1.0e0, 32.0e0, 0.59601180165247401484e-8},
		{6, 1.0e0, 8.0e0, 0.60978424397580572815e-5},
		{6, 1.0e0, 2.0e0, 0.61578909866319494394e-2},
		{6, 1.0e0, 1.0e0, 0.18854360275680840514e0},
		{6, 3.0e0, 2.0e0, 0.13319251347921659134e1},
		{6, 2.0e0, 1.0e0, 0.50857202271697616755e1},
		{6, 5.0e0, 2.0e0, 0.13729222365466557122e2},
		{6, 3.0e0, 1.0e0, 0.29579592481641441292e2},
		{6, 4.0e0, 1.0e0, 0.88600835706899853768e2},
		{6, 17.0e0, 4.0e0, 0.10916037113373004909e3},
		{6, 5.0e0, 1.0e0, 0.18224323749575359518e3},
		{6, 11.0e0, 2.0e0, 0.23765383125586756031e3},
		{6, 6.0e0, 1.0e0, 0.29543246745959381136e3},
		{6, 8.0e0, 1.0e0, 0.50681244381280455592e3},
		{6, 10.0e0, 1.0e0, 0.63878231134946125623e3},
		{6, 15.0e0, 1.0e0, 0.72699203556994876111e3},
		{6, 20.0e0, 1.0e0, 0.73230331643146851717e3},
		{6, 30.0e0, 1.0e0, 0.73248692015882096369e3},
		{6, 50.0e0, 1.0e0, 0.73248700462879996604e3},
		{7, 1.0e0, 512.0e0, 0.92518563327283409427e-17},
		{7, 1.0e0, 32.0e0, 0.15521095556949867541e-9},
		{7, 1.0e0, 8.0e0, 0.63516238373841716290e-6},
		{7, 1.0e0, 2.0e0, 0.25638801246626135714e-2},
		{7, 1.0e0, 1.0e0, 0.15665328993811649746e0},
		{7, 3.0e0, 2.0e0, 0.16538225039181097423e1},
		{7, 2.0e0, 1.0e0, 0.83763085709508211054e1},
		{7, 5.0e0, 2.0e0, 0.28078570717830763747e2},
		{7, 3.0e0, 1.0e0, 0.72009676046751991365e2},
		{7, 4.0e0, 1.0e0, 0.28174905701691911450e3},
		{7, 17.0e0, 4.0e0, 0.36660227975327792529e3},
		{7, 5.0e0, 1.0e0, 0.70556067982603601123e3},
		{7, 11.0e0, 2.0e0, 0.99661927562755629434e3},
		{7, 6.0e0, 1.0e0, 0.13288914430417403901e4},
		{7, 8.0e0, 1.0e0, 0.27987640273169129925e4},
		{7, 10.0e0, 1.0e0, 0.39721376409416504325e4},
		{7, 15.0e0, 1.0e0, 0.49913492839319899726e4},
		{7, 20.0e0, 1.0e0, 0.50781562639825019000e4},
		{7, 30.0e0, 1.0e0, 0.50820777202028708434e4},
		{7, 50.0e0, 1.0e0, 0.50820803580047164618e4},
		{8, 1.0e0, 512.0e0, 0.15488598634539359463e-19},
		{8, 1.0e0, 32.0e0, 0.41574269117845953797e-11},
		{8, 1.0e0, 8.0e0, 0.68050651245227411689e-7},
		{8, 1.0e0, 2.0e0, 0.10981703519563009836e-2},
		{8, 1.0e0, 1.0e0, 0.13396432776187883834e0},
		{8, 3.0e0, 2.0e0, 0.21153387806998617182e1},
		{8, 2.0e0, 1.0e0, 0.14227877028750735641e2},
		{8, 5.0e0, 2.0e0, 0.59312061431647843226e2},
		{8, 3.0e0, 1.0e0, 0.18139614577043147745e3},
		{8, 4.0e0, 1.0e0, 0.93148001928992220863e3},
		{8, 17.0e0, 4.0e0, 0.12817928112604611804e4},
		{8, 5.0e0, 1.0e0, 0.28572838386329242218e4},
		{8, 11.0e0, 2.0e0, 0.43872971687877730010e4},
		{8, 6.0e0, 1.0e0, 0.62993229139406657611e4},
		{8, 8.0e0, 1.0e0, 0.16589426277154888511e5},
		{8, 10.0e0, 1.0e0, 0.27064780798797398935e5},
		{8, 15.0e0, 1.0e0, 0.38974556062543661284e5},
		{8, 20.0e0, 1.0e0, 0.40400240716905025786e5},
		{8, 30.0e0, 1.0e0, 0.40484316504120655568e5},
		{8, 50.0e0, 1.0e0, 0.40484399001892184901e5},
		{9, 1.0e0, 512.0e0, 0.26469772870084897671e-22},
		{9, 1.0e0, 32.0e0, 0.11367943653594246210e-12},
		{9, 1.0e0, 8.0e0, 0.74428246255329800255e-8},
		{9, 1.0e0, 2.0e0, 0.48022728485415366194e-3},
		{9, 1.0e0, 1.0e0, 0.11700243014358676725e0},
		{9, 3.0e0, 2.0e0, 0.27648973910899914391e1},
		{9, 2.0e0, 1.0e0, 0.24716631405829192997e2},
		{9, 5.0e0, 2.0e0, 0.12827119828849828583e3},
		{9, 3.0e0, 1.0e0, 0.46842894800662208986e3},
		{9, 4.0e0, 1.0e0, 0.31673967371627895718e4},
		{9, 17.0e0, 4.0e0, 0.46140886546630195390e4},
		{9, 5.0e0, 1.0e0, 0.11952718545392302185e5},
		{9, 11.0e0, 2.0e0, 0.20001612666477027728e5},
		{9, 6.0e0, 1.0e0, 0.31011073271851366554e5},
		{9, 8.0e0, 1.0e0, 0.10352949905541130133e6},
		{9, 10.0e0, 1.0e0, 0.19743173017140591390e6},
		{9, 15.0e0, 1.0e0, 0.33826030414658460679e6},
		{9, 20.0e0, 1.0e0, 0.36179607036750755227e6},
		{9, 30.0e0, 1.0e0, 0.36360622124777561525e6},
		{9, 50.0e0, 1.0e0, 0.36360880558827162725e6},
	}

	for _, tc := range testCases {
		ζ := Transport(tc.order, tc.num/tc.den)
		if soclose(ζ, tc.res, 5e-13) == false {
			t.Fatalf("Transport(%v,%v): expected %v, got %v", tc.order, tc.num/tc.den, tc.res, ζ)
		}
	}
}

func TestStruve(t *testing.T) {
	testCases := []struct {
		order         int
		num, den, res float64
	}{
		{1, 1.0e0, 512.0e0, 0.12433974658847434366e-2},
		{1, -1.0e0, 128.0e0, -0.49735582423748415045e-2},
		{1, 1.0e0, 16.0e0, 0.39771469054536941564e-1},
		{1, -1.0e0, 4.0e0, -0.15805246001653314198e0},
		{1, 1.0e0, 1.0e0, 0.56865662704828795099e0},
		{1, 5.0e0, 4.0e0, 0.66598399314899916605e0},
		{1, 2.0e0, 1.0e0, 0.79085884950809589255e0},
		{1, -4.0e0, 1.0e0, -0.13501457342248639716e0},
		{1, 15.0e0, 2.0e0, 0.20086479668164503137e0},
		{1, 11.0e0, 1.0e0, -0.11142097800261991552e0},
		{1, 23.0e0, 2.0e0, -0.17026804865989885869e0},
		{1, -16.0e0, 1.0e0, -0.13544931808186467594e0},
		{1, 20.0e0, 1.0e0, 0.94393698081323450897e-1},
		{1, 25.0e0, 1.0e0, -0.10182482016001510271e0},
		{1, -30.0e0, 1.0e0, 0.96098421554162110012e-1},
		{1, 50.0e0, 1.0e0, -0.85337674826118998952e-1},
		{1, 75.0e0, 1.0e0, -0.76882290637052720045e-1},
		{1, -80.0e0, 1.0e0, 0.47663833591418256339e-1},
		{1, 100.0e0, 1.0e0, -0.70878751689647343204e-1},
		{1, -125.0e0, 1.0e0, 0.65752908073352785368e-1},
		{2, 1.0e0, 512.0e0, 0.80950369576367526071e-6},
		{2, -1.0e0, 128.0e0, 0.12952009724113229165e-4},
		{2, 1.0e0, 16.0e0, 0.82871615165407083021e-3},
		{2, -1.0e0, 4.0e0, 0.13207748375849572564e-1},
		{2, 1.0e0, 1.0e0, 0.19845733620194439894e0},
		{2, 5.0e0, 4.0e0, 0.29853823231804706294e0},
		{2, 2.0e0, 1.0e0, 0.64676372828356211712e0},
		{2, -4.0e0, 1.0e0, 0.10697266613089193593e1},
		{2, 15.0e0, 2.0e0, 0.38831308000420560970e0},
		{2, 9.0e0, 1.0e0, 0.74854243745107710333e0},
		{2, 19.0e0, 2.0e0, 0.84664854642567359993e0},
		{2, -12.0e0, 1.0e0, 0.58385732464244384564e0},
		{2, 17.0e0, 1.0e0, 0.80600584524215772824e0},
		{2, 25.0e0, 1.0e0, 0.53880362132692947616e0},
		{2, -30.0e0, 1.0e0, 0.72175037834698998506e0},
		{2, 50.0e0, 1.0e0, 0.58007844794544189900e0},
		{2, 75.0e0, 1.0e0, 0.60151910385440804463e0},
		{2, -80.0e0, 1.0e0, 0.70611511147286827018e0},
		{2, 100.0e0, 1.0e0, 0.61631110327201338454e0},
		{2, -125.0e0, 1.0e0, 0.62778480765443656489e0},
	}

	for _, tc := range testCases {
		ζ := Struve(tc.order, tc.num/tc.den)
		if close(ζ, tc.res) == false {
			t.Fatalf("Struve(%v,%v): expected %v, got %v", tc.order, tc.num/tc.den, tc.res, ζ)
		}

	}
}

func TestExp3(t *testing.T) {
	testCases := []struct {
		num, den, res float64
	}{
		{1.0e0, 512.0e0, 0.19531249963620212007e-2},
		{1.0e0, 128.0e0, 0.78124990686775522671e-2},
		{1.0e0, 32.0e0, 0.31249761583499728667e-1},
		{1.0e0, 8.0e0, 0.12493899888803079984e0},
		{1.0e0, 2.0e0, 0.48491714311363971332e0},
		{1.0e0, 1.0e0, 0.80751118213967145286e0},
		{5.0e0, 4.0e0, 0.86889265412623270696e0},
		{3.0e0, 2.0e0, 0.88861722235357162648e0},
		{15.0e0, 8.0e0, 0.89286018500218176869e0},
		{2.0e0, 1.0e0, 0.89295351429387631138e0},
		{17.0e0, 8.0e0, 0.89297479112737843939e0},
		{18.0e0, 8.0e0, 0.89297880579798112220e0},
		{5.0e0, 2.0e0, 0.89297950317496621294e0},
		{11.0e0, 4.0e0, 0.89297951152951902903e0},
		{3.0e0, 1.0e0, 0.89297951156918122102e0},
		{25.0e0, 8.0e0, 0.89297951156924734716e0},
		{13.0e0, 4.0e0, 0.89297951156924917298e0},
		{7.0e0, 2.0e0, 0.89297951156924921121e0},
		{15.0e0, 4.0e0, 0.89297951156924921122e0},
		{4.0e0, 1.0e0, 0.89297951156924921122e0},
	}

	for _, tc := range testCases {
		ζ := Exp3(tc.num / tc.den)
		if veryclose(ζ, tc.res) == false {
			t.Fatalf("Exp3(%v): expected %v, got %v", tc.num/tc.den, tc.res, ζ)
		}

	}
}

func TestAtnInt(t *testing.T) {
	testCases := []struct {
		num, den, res float64
	}{
		{1.0e0, 512.0e0, 0.19531241721588483191e-2},
		{-1.0e0, 256.0e0, -0.39062433772980711281e-2},
		{1.0e0, 128.0e0, 0.78124470192576499535e-2},
		{1.0e0, 64.0e0, 0.15624576181996527280e-1},
		{-1.0e0, 32.0e0, -0.31246610349485401551e-1},
		{1.0e0, 16.0e0, 0.62472911335014397321e-1},
		{1.0e0, 8.0e0, 0.12478419717389654039e0},
		{-1.0e0, 4.0e0, -0.24830175098230686908e0},
		{1.0e0, 2.0e0, 0.48722235829452235711e0},
		{1.0e0, 1.0e0, 0.91596559417721901505e0},
		{3.0e0, 2.0e0, 0.12749694484943800618e1},
		{-2.0e0, 1.0e0, -0.15760154034463234224e1},
		{4.0e0, 1.0e0, 0.24258878412859089996e1},
		{8.0e0, 1.0e0, 0.33911633326292997361e1},
		{16.0e0, 1.0e0, 0.44176450919422186583e1},
		{-20.0e0, 1.0e0, -0.47556713749547247774e1},
		{25.0e0, 1.0e0, 0.50961912150934111303e1},
		{30.0e0, 1.0e0, 0.53759175735714876256e1},
		{-50.0e0, 1.0e0, -0.61649904785027487422e1},
		{100.0e0, 1.0e0, 0.72437843013083534973e1},
	}

	for _, tc := range testCases {
		ζ := AtnInt(tc.num / tc.den)
		if veryclose(ζ, tc.res) == false {
			t.Fatalf("AtnInt(%v): expected %v, got %v", tc.num/tc.den, tc.res, ζ)
		}

	}
}

// The floating point comparison tests are copied from from math/all_test.go.
func tolerance(a, b, e float64) bool {
	// Multiplying by e here can underflow denormal values to zero.
	// Check a==b so that at least if a and b are small and identical
	// we say they match.
	if a == b {
		return true
	}
	d := a - b
	if d < 0 {
		d = -d
	}
	// note: b is correct (expected) value, a is actual value.
	// make error tolerance a fraction of b, not a.
	if b != 0 {
		e = e * b
		if e < 0 {
			e = -e
		}
	}
	return d < e
}

func close(a, b float64) bool      { return tolerance(a, b, 1e-14) }
func veryclose(a, b float64) bool  { return tolerance(a, b, 5e-16) }
func soclose(a, b, e float64) bool { return tolerance(a, b, e) }
